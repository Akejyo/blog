(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{688:function(s,a,t){"use strict";t.r(a);var n=t(5),i=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("树上DP")]),s._v(" "),t("h1",{attrs:{id:"h-矿物储量不足"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h-矿物储量不足"}},[s._v("#")]),s._v(" H. 矿物储量不足")]),s._v(" "),t("p",[t("strong",[s._v("题意")]),s._v("：一颗有n个节点的树，每个节点的权值为1或-1，求树上以1~n节点为根的连通块的最大权值和")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("分析：其实该题是要求包含i节点的连通块的最大权值和，先以1为根节点，如果我们知道了i"),t("strong",[s._v("子树里")]),s._v("包含i的连通块的最大权值和，那么包含i的连通块的最大权值和就可以通过其父亲和i自己转移得到。")]),s._v(" "),t("p",[s._v("假设包含i的连通块的最大权值和为ans[i]：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("先跑一遍dfs确定各a[i]:对于i节点的每个儿子j，"),t("span",{staticClass:"katex"},[t("span",{staticClass:"katex-mathml"},[t("math",[t("semantics",[t("mrow",[t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("i")]),t("mo",[s._v("]")]),t("mo",[s._v("+")]),t("mo",[s._v("=")]),t("mi",[s._v("m")]),t("mi",[s._v("a")]),t("mi",[s._v("x")]),t("mo",[s._v("{")]),t("mn",[s._v("0")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("j")]),t("mo",[s._v("]")]),t("mo",[s._v("}")])],1),t("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("ans[i]+=max\\{0,ans[j]\\}")])],1)],1)],1),t("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[t("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),t("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),t("span",{staticClass:"base textstyle uncramped"},[t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit"},[s._v("i")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mbin"},[s._v("+")]),t("span",{staticClass:"mrel"},[s._v("=")]),t("span",{staticClass:"mord mathit"},[s._v("m")]),t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("x")]),t("span",{staticClass:"mopen"},[s._v("{")]),t("span",{staticClass:"mord mathrm"},[s._v("0")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mclose"},[s._v("}")])])])]),s._v("，最后ans[i]加上自己的权值。此时每个ans[i]是i子树里包含i的连通块的最大权值和；")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("for (auto v : e[u]) \n\t\tif(!vis[v])\n\t\t\tans[u] += max(0, dfs(v));\nans[u] += value[u];\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("再跑一遍dfs，对于i节点的儿子每个儿子j：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("若"),t("span",{staticClass:"katex"},[t("span",{staticClass:"katex-mathml"},[t("math",[t("semantics",[t("mrow",[t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("j")]),t("mo",[s._v("]")]),t("mo",[s._v("<")]),t("mn",[s._v("0")])],1),t("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("ans[j]<0")])],1)],1)],1),t("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[t("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),t("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),t("span",{staticClass:"base textstyle uncramped"},[t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mrel"},[s._v("<")]),t("span",{staticClass:"mord mathrm"},[s._v("0")])])])]),s._v("，说明j子树里包含j的连通块最大权值和是负的，这时候就可以看它父亲ans[i]是否是正的，如果是正的，说明父亲i没取到j及其一下的部分还是正的，那ans[j]就直接加ans[i]，否则ans[j]不变；")])]),s._v(" "),t("li",[t("p",[s._v("若"),t("span",{staticClass:"katex"},[t("span",{staticClass:"katex-mathml"},[t("math",[t("semantics",[t("mrow",[t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("j")]),t("mo",[s._v("]")]),t("mo",[s._v(">")]),t("mn",[s._v("0")])],1),t("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("ans[j]>0")])],1)],1)],1),t("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[t("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),t("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),t("span",{staticClass:"base textstyle uncramped"},[t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mrel"},[s._v(">")]),t("span",{staticClass:"mord mathrm"},[s._v("0")])])])]),s._v("，显然ans[j]就取"),t("span",{staticClass:"katex"},[t("span",{staticClass:"katex-mathml"},[t("math",[t("semantics",[t("mrow",[t("mi",[s._v("m")]),t("mi",[s._v("a")]),t("mi",[s._v("x")]),t("mo",[s._v("{")]),t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("j")]),t("mo",[s._v("]")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mi",[s._v("a")]),t("mi",[s._v("n")]),t("mi",[s._v("s")]),t("mo",[s._v("[")]),t("mi",[s._v("i")]),t("mo",[s._v("]")]),t("mo",[s._v("}")])],1),t("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("max\\{ans[j],ans[i]\\}")])],1)],1)],1),t("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[t("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),t("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),t("span",{staticClass:"base textstyle uncramped"},[t("span",{staticClass:"mord mathit"},[s._v("m")]),t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("x")]),t("span",{staticClass:"mopen"},[s._v("{")]),t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mord mathit"},[s._v("a")]),t("span",{staticClass:"mord mathit"},[s._v("n")]),t("span",{staticClass:"mord mathit"},[s._v("s")]),t("span",{staticClass:"mopen"},[s._v("[")]),t("span",{staticClass:"mord mathit"},[s._v("i")]),t("span",{staticClass:"mclose"},[s._v("]")]),t("span",{staticClass:"mclose"},[s._v("}")])])])]),s._v(";")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("for (auto v : e[u]) {\n\t\tif (!vis2[v]) {\n\t\t\tif (an[v] < 0)\n\t\t\t\tan[v] += max(0,an[u]);\n\t\t\telse\n\t\t\t\tan[v] = max(an[v],an[u]);\n\t\t\tdfs2(v);\n\t\t}\n\t}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])]),s._v(" "),t("p",[s._v("这样两波dfs后，每个节点的答案就出来了。")]),s._v(" "),t("hr"),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include <bits/stdc++.h>\ntemplate<typename T>\ninline void read(T& x) { x = 0; char c = getchar(); while (!isdigit(c))c = getchar(); while (isdigit(c)) { x = x * 10 + c - '0'; c = getchar(); } }\n#define si(a) read(a)\n#define sii(a,b) read(a),read(b)\n#define siii(a,b,c) read(a),read(b),read(c)\n#define fl float\n#define ll long long int\n#define ull unsigned long long int\nusing namespace std;\nint gcd(int a, int b) { return a == 0 ? b : gcd(b % a, a); }\nint jd(int a) { return a < 0 ? (a * -1) : a; }\nconst ll MOD = 998244353;\nconst int N = 2e5 + 10;\nint n, m;\nvector <int> e[N];\nint c[N], an[N];\nint vis[N], vis2[N];\nint dfs(int u) {\n\tif (vis[u])\n\t\treturn 0;\n\tvis[u] = 1;\n\tan[u] = c[u];\n\tint tot = 0;\n\tfor (auto v : e[u]) \n\t\tif(!vis[v])\n\t\t\ttot += max(0, dfs(v));//选或不选\n\tan[u] += tot;\n\treturn an[u];\n}\nvoid dfs2(int u) {\n\tif (vis2[u])\n\t\treturn;\n\tvis2[u] = 1;\n\tfor (auto v : e[u]) {\n\t\tif (!vis2[v]) {\n\t\t\tif (an[v] < 0)\n\t\t\t\tan[v] += max(0,an[u]);\n\t\t\telse\n\t\t\t\tan[v] = max(an[v],an[u]);\n\t\t\tdfs2(v);\n\t\t}\n\t}\n}\nvoid solve() {\n\tsi(n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tint tem; si(tem);\n\t\tc[i] = tem ? 1 : -1;\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tint a, b; sii(a, b);\n\t\te[a].push_back(b);\n\t\te[b].push_back(a);\n\t}\n\tdfs(1);\n\tdfs2(1);\n\tfor (int i = 1; i <= n; i++)printf(\"%d \", an[i]);\n}\nint main() {\n\tint t;\n\t/*si(t);\n\twhile (t--)*/\n\tsolve();\n\treturn 0;\n}/*10 2\n1 2 3 3 3 4 5 3 4 5*/\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br")])])])}),[],!1,null,null,null);a.default=i.exports}}]);