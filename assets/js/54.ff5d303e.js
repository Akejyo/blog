(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{716:function(n,s,t){"use strict";t.r(s);var a=t(5),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("回转数")]),n._v(" "),t("h1",{attrs:{id:"c-回转数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-回转数"}},[n._v("#")]),n._v(" C. 回转数")]),n._v(" "),t("p",[t("strong",[n._v("题意")]),n._v(":给定n个点，顺次连接这些点得到折线。m次询问，每次给出一个点，询问折线绕该点的回转数")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("如果暴力用atan2去算每个每个角度来计算，虽然每次询问的复杂度是O(n)，但atan2的计算很耗时间，会TLE。本题需要用光线投影法来做。")]),n._v(" "),t("p",[n._v("首先需要特判该点是否在折线的边/顶点上，如果不在，做一条过该点的直线"),t("strong",[n._v("L")]),n._v("（射线也行），遍历折线上的每条边，判断"),t("strong",[n._v("L")]),n._v("是从边的哪个方向穿过去的（折线顺次连接，有方向性）。从左到右穿过去ans+1，从右到左穿过去则ans-1，最终的结果即为ans/2（因为前面取的是直线，所以会穿两边）。")]),n._v(" "),t("p",[n._v("简化考虑，取直线为过该点的水平直线，那么之后只要做一下toleft检测和y坐标的比较就行了。")]),n._v(" "),t("hr"),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#include <bits/stdc++.h>\ntemplate<typename T>\ninline void read(T& x) { x = 0; char c = getchar(); while (!isdigit(c))c = getchar(); while (isdigit(c)) { x = x * 10 + c - \'0\'; c = getchar(); } }\n#define si(a) read(a)\n#define sii(a,b) read(a),read(b)\n#define siii(a,b,c) read(a),read(b),read(c)\n#define fl double\n#define ll long long int\n#define ull unsigned long long int\n#define T ll\nusing namespace std;\nconst ll MOD = 1e9 + 7;\nconst int N = 2e5 + 10;//                       这个容易改的啊！！！！！！！\n//int gcd(int a, int b) { return a == 0 ? b : gcd(b % a, a); }\nll gcd(ll a, ll b) { return a == 0 ? b : gcd(b % a, a); }\nint n, m;\nstruct Point { T x, y; };\nstruct Segment { Point a, b; };\nstruct Line { Point p, v; };\nstruct Polygon { vector<Point> p; };\nT Dot_p(Point a, Point b) { return a.x * b.x + a.y * b.y; }//点积\nT Cro_p(Point a, Point b) { return a.x * b.y - a.y * b.x; }//叉积\nT to_left(Point p, Line X) { return Cro_p({ p.x - X.p.x,p.y - X.p.y }, X.v); }//正→右边、负→左边\nPoint make_vector(Point A, Point B) { return { B.x - A.x,B.y - A.y }; }//点合成向量A→B\nbool p_on_seg(Point p, Segment l) {//点在线段上\n\tif (to_left(p, { l.a,make_vector(l.a,l.b)}) != 0)return false;\n\tif (p.x >= min(l.a.x, l.b.x) && p.x <= max(l.a.x, l.b.x)) return true;\n\treturn false;\n}\nbool p_on_line(Point a, Line l) {//点在直线上\n\tif (Cro_p(l.v, make_vector(a,l.p)) == 0)return true;\n\treturn false;\n}\nbool seg_c_seg(Segment a, Segment b) {//线段相交\n\tif (p_on_seg(a.a, b) || p_on_seg(a.b, b) || p_on_seg(b.a, a) || p_on_seg(b.b, a))return true;//端点在线段上\n\tPoint av =make_vector(a.a,a.b), bv = make_vector(b.a,b.b);//A→B的方向\n\tif (to_left(a.a, { b.b,bv }) * to_left(a.b, { b.b,bv }) > 0)return false;\n\tif (to_left(b.a, { a.b,av }) * to_left(b.b, { a.b,av }) > 0)return false;\n\treturn true;\n}\nPolygon P;\nbool check(Point p) {\n\tint p_sz = P.p.size();\n\t//for (int i = 0; i < p_sz; i++)if (p.x == P.p[i].x && p.y == P.p[i].y)return false;\n\tfor (int i = 0; i < p_sz; i++)\n\t\tif (p_on_seg(p, { P.p[i],P.p[(i + 1) % p_sz] }))return true;\n\treturn false;\n}\nll huizhuan(Point p) {\n\tint p_sz = P.p.size();\n\tll res = 0;\n\tfor (int i = 0; i < p_sz; i++) {\n\t\tSegment tmp = { P.p[i],P.p[(i + 1) % p_sz] };\n\t\tll wtf;\n\t\tif (p.y >= min(tmp.a.y, tmp.b.y) && p.y < max(tmp.a.y, tmp.b.y)) {//一个带等于一个不带，这样顶点只会记一次\n\t\t\twtf = to_left(p, { tmp.a,make_vector(tmp.a,tmp.b) });\n\t\t\tif (wtf > 0)res--;\n\t\t\telse if (wtf < 0)res++;\n\t\t}\n\t}\n\treturn res/2;\n}\nvoid solve() {//         快读不能读负数啊！！！ 交互不能快读啊！！！╰(艹皿艹)\n\tsi(n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tT x, y; scanf("%lld %lld", &x, &y);\n\t\tP.p.push_back({ x,y });\n\t}\n\tsi(m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tT x, y; scanf("%lld %lld", &x, &y);\n\t\tPoint cao = { x,y };\n\t\tif (check(cao)) { puts("EDGE"); continue;}\n\t\tprintf("%lld\\n",huizhuan(cao));\n\t}\n}\nint main() {\n\tint t;\n\tt = 1;\n\t//si(t);\n\twhile (t--)\n\t\tsolve();\n\treturn 0;\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);