(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{721:function(t,n,s){"use strict";s.r(n);var a=s(5),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("最小路径覆盖")]),t._v(" "),s("h1",{attrs:{id:"t-我彻底理解了v圈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#t-我彻底理解了v圈"}},[t._v("#")]),t._v(" T. 我彻底理解了V圈！")]),t._v(" "),s("p",[s("strong",[t._v("题意")]),t._v("：给定一个有向无环图，求最小路径覆盖")]),t._v(" "),s("p",[t._v("由于每个点"),s("strong",[t._v("最多只有一个入边一个出边")]),t._v("，显然最小路径的数量为"),s("strong",[t._v("点数")]),t._v("-"),s("strong",[t._v("边数")]),t._v("。点数是固定的，所以我们求边数最大即可。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("p",[t._v("对一个节点a，当我们想将a指向b，但b已经被其他点c指向的时候，可以判断一下是否能做到断开c->b让c连其他点，然后连a->b，这样边数就能加一。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bool jud(int u) {//判断能不能断开重连一条\n\tfor (auto v : e[u])\n\t\tif (!vis[v]) {\n\t\t\tvis[v] = 1;                   //two记录点的入边的那个点\n\t\t\tif (!two[v] || jud(two[v])) {//这条点没用过或者对于v可以可以断一条（重连另一条）\n\t\t\t\ttwo[v] = u;\n\t\t\t\treturn true;//边数加一\n\t\t\t}\n\t\t}\n\treturn false;\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("hr"),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <bits/stdc++.h>\n#define si(a) scanf("%d",&a)\n#define sii(a,b) scanf("%d%d",&a,&b)\n#define siii(a,b,c) scanf("%d%d%d",&a,&b,&c)\n#define fl float\n#define ll long long int\n#define ull unsigned long long int\nusing namespace std;\nint gcd(int a, int b) { return a == 0 ? b : gcd(b % a, a); }\nint jd(int a) { return a < 0 ? (a * -1) : a; }\nvector<int>e[12010];\nvector<int>e2[12010];\nset<int>pp;\nint vis[12010];\nint two[12010];// two[i] -> i\nint p_cut;\nbool jud(int u) {\n\tfor (auto v : e[u])\n\t\tif (!vis[v]) {\n\t\t\tvis[v] = 1;\n\t\t\tif (!two[v] || jud(two[v])) {//这条点没用过或者可以断一条（重连另一条）\n\t\t\t\ttwo[v] = u;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\treturn false;\n}\nvoid twomax(int u) {\n\tif (vis[u])\n\t\treturn;\n\tvis[u] = 1;\n\tfor (auto v : e[u]) {\n\t\tif (!vis[v]) {\n\t\t\tvis[v] = 1;\n\t\t\tif (!two[v]) {\n\t\t\t\ttwo[v] = u;//v和u连\n\t\t\t\tp_cut++;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (jud(two[v])) {//找v所连边后有没有合理的边了\n\t\t\t\t\ttwo[v] = u;\n\t\t\t\t\tp_cut++;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid solve() {\n\tint n, m;\n\tsii(n, m);\n\tfor (int i = 0; i < m; i++) {\n\t\tint a, b; sii(a, b);\n\t\te[a].push_back(b);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!e[i].empty()) {\n\t\t\tmemset(vis, 0, sizeof(int)*(n+1));\n\t\t\ttwomax(i);\n\t\t}\n\t}\n\tprintf("%d", n - p_cut);\n}\nint main() {\n\tint t;\n\t/*si(t);\n\twhile (t--)*/\n\tsolve();\n\treturn 0;\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br"),s("span",{staticClass:"line-number"},[t._v("68")]),s("br"),s("span",{staticClass:"line-number"},[t._v("69")]),s("br"),s("span",{staticClass:"line-number"},[t._v("70")]),s("br"),s("span",{staticClass:"line-number"},[t._v("71")]),s("br")])])])}),[],!1,null,null,null);n.default=i.exports}}]);