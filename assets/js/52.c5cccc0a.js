(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{722:function(t,n,s){"use strict";s.r(n);var a=s(5),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("朱刘算法求最小树形图")]),t._v(" "),s("h1",{attrs:{id:"r-建设道路2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#r-建设道路2"}},[t._v("#")]),t._v(" R. 建设道路2")]),t._v(" "),s("p",[s("strong",[t._v("题意")]),t._v("：给定一个有"),s("strong",[t._v("n")]),t._v("个节点的有向图，起点为"),s("strong",[t._v("r")]),t._v("，"),s("strong",[t._v("m")]),t._v("条边（u->v权值w)，求每个"),s("strong",[t._v("r")]),t._v("到每个点之和的最小值。")]),t._v(" "),s("p",[s("em",[t._v("就是求有向图的最小生成树，即最小树形图。")])]),t._v(" "),s("h3",{attrs:{id:"朱刘算法-edmods算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#朱刘算法-edmods算法"}},[t._v("#")]),t._v(" 朱刘算法（Edmods算法）")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("算法流程")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对每个点，选择它的"),s("strong",[t._v("入边中权值最小")]),t._v("的那个边(根节点除外，根没入边)")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for (int i = 0; i < m; i++) {\n\t\t\tint a, b;\n\t\t\ta = e[i].v;\n\t\t\tif ( ined[a] > (b = e[i].w)) {\n\t\t\t\tined[a] = b;//a点入边的权值\n\t\t\t\tpre[a] = e[i].u;//a的入边的点\n\t\t\t}\n\t\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("若出现环，将环缩点后更新其他点到环的距离。关于更新距离：")]),t._v(" "),s("ol",[s("li",[t._v("若这个边在环内则删去这条边")]),t._v(" "),s("li",[t._v("若该边的终点在环上，其权值更新为："),s("strong",[t._v("原来的权值")]),t._v("-"),s("strong",[t._v("该点在环里对应入边的权值")])])])])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for (int i = 1; i <= n; i++) {\n\t\t\tif (i != root) {\n\t\t\t\tan += ined[i];//更新一下答案\n\t\t\t\tfor (tem = i; tem != root && vis[tem] != i && !id[tem]; tem = pre[tem])\n\t\t\t\t    vis[tem] = i;     //不为根 + 未被访问过（防止一直跑环） + 未被缩环\n\t\t\t\t\t                 //赋值i，区分操作区间\n\t\t\t\tif (vis[tem] == i && tem != root) {//由于每个点都有入边，若满足该式，则必成环\n\t\t\t\t\tcut++;\n\t\t\t\t\tint flag = 1;\n\t\t\t\t\tfor (int j = tem; flag || j != tem; j = pre[j]) {//把这个环的id统一一下，缩环\n\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\tid[j] = cut;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("blockquote",[s("p",[t._v("该算法还可以用Tarjan优化 "),s("a",{attrs:{href:"https://oi-wiki.org/graph/dmst/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最小树形图 - OI Wiki (oi-wiki.org)"),s("OutboundLink")],1)])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <bits/stdc++.h>\n#define si(a) scanf("%d",&a)\n#define sii(a,b) scanf("%d%d",&a,&b)\n#define siii(a,b,c) scanf("%d%d%d",&a,&b,&c)\n#define fl float\n#define ll long long int\n#define ull unsigned long long int\nusing namespace std;\nint gcd(int a, int b) { return a == 0 ? b : gcd(b % a, a); }\nint jd(int a) { return a < 0 ? (a * -1) : a; }\nint n, m, r;\nstruct road {\n\tint u, v;\n\tll w;\n\t//bool friend operator < (road a, road b) { return a.w < b.w; }\n};\nint fa[10010];\ninline signed gf(int x) { return fa[x] == x ? x : fa[x] = gf(fa[x]); }\nll an;\nvector<road> e;\nint flag, tem, root, cut;\nint vis[110];\nint id[110];//记录缩环标号\nint pre[110];//pre[i]记录是i点的入边\nll ined[110];//入边边权(最小)\nvoid START() {//初始化\n\tcut = 0;\n\tmemset(ined, 88, sizeof(ined));\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(id, 0, sizeof(id));\n}\nbool jud() {\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (ined[i] > 1e9 && i != root)//没有入边且不为根节点\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nvoid Edmonds() {\n\twhile (1) {\n\t\tSTART();\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint a, b;\n\t\t\ta = e[i].v;\n\t\t\tif ( ined[a] > (b = e[i].w)) {\n\t\t\t\tined[a] = b;\n\t\t\t\tpre[a] = e[i].u;\n\t\t\t}\n\t\t}\n\t\t/*for (auto it : e) {\n\t\t\tif (ined[it.v] > it.w) {//每个点选它的入边里权值小的\n\t\t\t\tined[it.v] = it.w;\n\t\t\t\tpre[it.v] = it.u;\n\t\t\t}\n\t\t}*/\n\t\tif (jud()) {\n\t\t\tan = -1;\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i != root) {\n\t\t\t\tan += ined[i];\n\t\t\t\tfor (tem = i; tem != root && vis[tem] != i && !id[tem]; tem = pre[tem])//不为根 + 未被访问过（防止一直跑环） + 未被缩环\n\t\t\t\t\tvis[tem] = i;//赋值i，区分操作区间\n\t\t\t\tif (vis[tem] == i && tem != root) {//每个点都有入边，若满足该式，则必成环\n\t\t\t\t\tcut++;\n\t\t\t\t\tint flag = 1;\n\t\t\t\t\tfor (int j = tem; flag || j != tem; j = pre[j]) {//把这个环的id统一一下，缩环\n\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\tid[j] = cut;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!cut) return;//没缩环就能结束了\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (!id[i])\n\t\t\t\tid[i] = ++cut;//给没缩环的点标号\n\t\troot = id[root];//更新根的标号\n\t\t/*for (int i = 0; i < m; i++) {\n\t\t\tint tem = e[i].v;\n\t\t\te[i].u = id[e[i].u];\n\t\t\te[i].v = id[tem];\n\t\t\tif (e[i].u != e[i].v) e[i].w -= ined[tem];\n\t\t}*/\n\t\tint sum = 0 ;\n\t\tfor (int i = 0; i < m; i++)\n\t\t\tif (id[e[i].u] != id[e[i].v]) //如果边的两点标号不一样,覆盖、更新\n\t\t\t\te[sum++] = { id[e[i].u],id[e[i].v],e[i].w - ined[e[i].v] };\n\t\tn = cut;\n\t\tm = sum;\n\t}\n}\nvoid solve() {\n\tsiii(n, m, r);\n\troot = r;\n\tint sum = 0;\n\tfor (int i = 0; i < m; i++) {\n\t\tint a, b, c;\n\t\tsiii(a, b, c);\n\t\tif (b != r && a != b) {//指向根的不要，自环不要\n\t\t\te.push_back({ a,b,(ll)c });\n\t\t\tsum++;\n\t\t}\n\t}\n\tm = sum;//更新边数\n\tEdmonds();\n\tprintf("%lld", an);\n}\nint main() {\n\tint t;\n\t/*si(t);\n\twhile (t--)*/\n\tsolve();\n\treturn 0;\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br"),s("span",{staticClass:"line-number"},[t._v("68")]),s("br"),s("span",{staticClass:"line-number"},[t._v("69")]),s("br"),s("span",{staticClass:"line-number"},[t._v("70")]),s("br"),s("span",{staticClass:"line-number"},[t._v("71")]),s("br"),s("span",{staticClass:"line-number"},[t._v("72")]),s("br"),s("span",{staticClass:"line-number"},[t._v("73")]),s("br"),s("span",{staticClass:"line-number"},[t._v("74")]),s("br"),s("span",{staticClass:"line-number"},[t._v("75")]),s("br"),s("span",{staticClass:"line-number"},[t._v("76")]),s("br"),s("span",{staticClass:"line-number"},[t._v("77")]),s("br"),s("span",{staticClass:"line-number"},[t._v("78")]),s("br"),s("span",{staticClass:"line-number"},[t._v("79")]),s("br"),s("span",{staticClass:"line-number"},[t._v("80")]),s("br"),s("span",{staticClass:"line-number"},[t._v("81")]),s("br"),s("span",{staticClass:"line-number"},[t._v("82")]),s("br"),s("span",{staticClass:"line-number"},[t._v("83")]),s("br"),s("span",{staticClass:"line-number"},[t._v("84")]),s("br"),s("span",{staticClass:"line-number"},[t._v("85")]),s("br"),s("span",{staticClass:"line-number"},[t._v("86")]),s("br"),s("span",{staticClass:"line-number"},[t._v("87")]),s("br"),s("span",{staticClass:"line-number"},[t._v("88")]),s("br"),s("span",{staticClass:"line-number"},[t._v("89")]),s("br"),s("span",{staticClass:"line-number"},[t._v("90")]),s("br"),s("span",{staticClass:"line-number"},[t._v("91")]),s("br"),s("span",{staticClass:"line-number"},[t._v("92")]),s("br"),s("span",{staticClass:"line-number"},[t._v("93")]),s("br"),s("span",{staticClass:"line-number"},[t._v("94")]),s("br"),s("span",{staticClass:"line-number"},[t._v("95")]),s("br"),s("span",{staticClass:"line-number"},[t._v("96")]),s("br"),s("span",{staticClass:"line-number"},[t._v("97")]),s("br"),s("span",{staticClass:"line-number"},[t._v("98")]),s("br"),s("span",{staticClass:"line-number"},[t._v("99")]),s("br"),s("span",{staticClass:"line-number"},[t._v("100")]),s("br"),s("span",{staticClass:"line-number"},[t._v("101")]),s("br"),s("span",{staticClass:"line-number"},[t._v("102")]),s("br"),s("span",{staticClass:"line-number"},[t._v("103")]),s("br"),s("span",{staticClass:"line-number"},[t._v("104")]),s("br"),s("span",{staticClass:"line-number"},[t._v("105")]),s("br"),s("span",{staticClass:"line-number"},[t._v("106")]),s("br"),s("span",{staticClass:"line-number"},[t._v("107")]),s("br"),s("span",{staticClass:"line-number"},[t._v("108")]),s("br"),s("span",{staticClass:"line-number"},[t._v("109")]),s("br"),s("span",{staticClass:"line-number"},[t._v("110")]),s("br"),s("span",{staticClass:"line-number"},[t._v("111")]),s("br"),s("span",{staticClass:"line-number"},[t._v("112")]),s("br"),s("span",{staticClass:"line-number"},[t._v("113")]),s("br"),s("span",{staticClass:"line-number"},[t._v("114")]),s("br"),s("span",{staticClass:"line-number"},[t._v("115")]),s("br"),s("span",{staticClass:"line-number"},[t._v("116")]),s("br")])])])}),[],!1,null,null,null);n.default=i.exports}}]);